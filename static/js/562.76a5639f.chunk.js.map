{"version":3,"file":"static/js/562.76a5639f.chunk.js","mappings":"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","sources":["components/forms/registrationForm/AuthForms.styled.js","pages/authLayout/AuthLayout.styled.js","components/forms/loginForm/LoginForm.jsx","pages/loginPage/LoginPage.styled.js","pages/loginPage/LoginPage.jsx"],"sourcesContent":["import styled from \"@emotion/styled\";\nimport { Field, Form } from \"formik\";\n\nexport const StyledForm = styled(Form)`\nposition: absolute;\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\ntop: 50%;\nleft: 50%;\npadding: 40px 65px 60px 65.5px;\ntransform: translate(-50%, -50%);\nz-index: 1;\nwidth: 540px;\nbackground-color: ${p => p.theme.colors.lightBackgroundColor};\nborder-radius: ${p => p.theme.radii.form};\n`;\n\nexport const FieldWrap = styled.div`\nposition: relative;\nwidth: 100%;\nmargin-bottom: 40px;\n\n&:nth-of-type(3){\n    margin-bottom: 10px;\n}\n&:last-of-type{\n    margin-bottom: 50px;\n}\n&:first-of-type{\n    margin-top: 50px;\n}\n`;\n\nexport const IconWrap = styled.span`\nposition: absolute;\nwidth: 24px;\nheight: 24px;\nleft: 8px;\nbottom: 10px;\n`;\n\nexport const StyledField = styled(Field)`\nwidth: 100%;\nheight: 34px;\npadding-left: 52px;\npadding-bottom: 10px;\nfont-size: ${p => p.theme.fontSizes.m};\nline-height: ${p => p.theme.lineHeights.normal};\n\nborder: ${p => p.theme.borders.none};\nborder-bottom: 1px solid ${p => p.theme.colors.borderColor};\n`;\n\nexport const Svg = styled.svg`\nwidth: 24px;\nheight: 24px;\nmargin-right: 20px;\n`;\n\nexport const EyeButton = styled.button`\nposition: absolute;\nright: 0;\ntop: 50%;\ntransform: translateY(-50%);\nbackground-color: transparent;\noutline: none;\nborder: ${p => p.theme.borders.none};\nwidth: 30px;\n`;\n\nexport const StyledErrorMessage = styled.div`\nposition: absolute;\nbottom: -25px;\nleft: 50%;\ntransform: translateX(-50%);\ncolor: ${p => p.theme.colors.expenseColor};\n`;\n\n","import styled from \"@emotion/styled\";\nimport ellipseLeft from '../../images/ellipse-left.png';\nimport ellipseRight from '../../images/ellipse-right.png';\n\n\nexport const Container = styled.div`\n    position: relative;\n    display: flex;\n    margin: 0 auto;\n    width: 1280px;\n    height: 720px;\n    overflow: hidden;\n    background-color: ${p => p.theme.colors.backgroundColor};\n\n    &::before {\n    content: \"\";\n    position: absolute;\n    background-image: url(${ellipseLeft});\n    background-repeat: no-repeat;\n    background-position: bottom left;\n    bottom: 0;\n    left: 0;\n    width: 618px;\n    height: 547px;\n    }\n\n    &::after {\n    content: \"\";\n    position: absolute;\n    background-image: url(${ellipseRight});\n    background-repeat: no-repeat;\n    background-position: top right;\n    width: 618px;\n    height: 547px;\n    right: 0;\n    top: 0;\n    filter: blur(15px);\n    opacity: 0.6;\n    }\n`;\n\nexport const RightBackground = styled.div`\n    position: relative;\n    width: 720px;\n    height: 720px;\n    background-color: ${p => p.theme.colors.secondaryBackgroundColor};\n`;","import { ErrorMessage, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { Logo } from 'components/logo/Logo';\nimport { EyeButton, FieldWrap, IconWrap, StyledErrorMessage, StyledField, StyledForm, Svg } from '../registrationForm/AuthForms.styled';\nimport { Button } from 'components/buttons/button/Button';\nimport Sprite from '../../../images/icons/symbol-defs.svg';\nimport { useDispatch } from 'react-redux';\nimport { login } from 'redux/auth/auth-operations';\nimport { StyledNavButton } from 'components/buttons/button/Button.styled';\nimport { Loader } from 'components/loader/Loader';\nimport { useState } from 'react';\nimport { AiOutlineEye, AiOutlineEyeInvisible } from 'react-icons/ai';\n\nconst idPassword = nanoid();\nconst idEmail = nanoid();\n\nexport const LoginForm = () => {\n    const dispatch = useDispatch();\n    const [showPassword, setShowPassword] = useState(false);\n    \n    return (\n       <Formik\n          initialValues={{ email: '', password: '' }}\n            validationSchema={Yup.object({\n              email: Yup.string().email('must be a valid email').required('Required'),\n              password: Yup.string().required('Required'),\n            })\n            }\n            onSubmit={({ email, password }, { resetForm }) => {\n              dispatch(login({ email, password }));\n              resetForm();\n            }}\n        >\n            <StyledForm autoComplete=\"off\" >\n                <Logo />\n                <FieldWrap>\n                    <StyledField label=\"Email\" name=\"email\" type=\"email\" id={idEmail} placeholder=\"E-mail\"/>\n                    <IconWrap><Svg><use href={`${Sprite}#icon-email`}></use></Svg></IconWrap>\n                    <StyledErrorMessage>\n                        <ErrorMessage name=\"email\"/>\n                    </StyledErrorMessage>\n                </FieldWrap>\n                \n                <FieldWrap>\n                    <StyledField label=\"Password\" name=\"password\" type={showPassword ? 'text' : 'password'} id={idPassword} placeholder=\"Password\"/>\n                    <IconWrap><Svg><use href={`${Sprite}#icon-lock`}></use></Svg></IconWrap>\n                    <EyeButton type=\"button\" onClick={() => setShowPassword(!showPassword)}>\n                        {!showPassword ? <AiOutlineEyeInvisible color='#BDBDBD'/>:<AiOutlineEye color='#BDBDBD'/>}\n                    </EyeButton>\n                    <StyledErrorMessage >\n                        <ErrorMessage name=\"password\"/>\n                    </StyledErrorMessage>\n                </FieldWrap> \n                <Button type=\"submit\">\n                    Log in\n                </Button>\n                <StyledNavButton to=\"/register\">\n                    Registration\n                </StyledNavButton>\n                <Loader />\n            </StyledForm> \n        </Formik>\n    )\n}","import styled from \"@emotion/styled\";\nimport loginImg from '../../images/login.png'\n\nexport const LeftBackground = styled.div`\n    position: relative;\n    width: 560px;\n    height: 720px;\n   \n    &::after{\n        content: \"\";\n        position: absolute;\n        background-image: url(${loginImg});\n        background-repeat: no-repeat;\n        background-position: center;\n        width: 435px;\n        height: 420px;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%)\n    }\n`;","import { LoginForm } from \"components/forms/loginForm/LoginForm\";\nimport { Container, RightBackground } from \"pages/authLayout/AuthLayout.styled\";\nimport { LeftBackground } from \"./LoginPage.styled\";\n\nconst LoginPage = () => {\n    return (\n        <Container>\n            <LeftBackground/>\n            <RightBackground>\n                    <LoginForm/>\n            </RightBackground>\n        </Container>\n    )\n}\n\nexport default LoginPage;"],"names":["StyledForm","styled","Form","p","theme","colors","lightBackgroundColor","radii","form","FieldWrap","IconWrap","StyledField","Field","fontSizes","m","lineHeights","normal","borders","none","borderColor","Svg","EyeButton","StyledErrorMessage","expenseColor","Container","backgroundColor","ellipseLeft","ellipseRight","RightBackground","secondaryBackgroundColor","idPassword","nanoid","idEmail","LoginForm","dispatch","useDispatch","useState","showPassword","setShowPassword","initialValues","email","password","validationSchema","Yup","required","onSubmit","resetForm","login","autoComplete","Logo","label","name","type","id","placeholder","href","Sprite","onClick","color","Button","to","Loader","LeftBackground","loginImg"],"sourceRoot":""}