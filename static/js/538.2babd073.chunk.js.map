{"version":3,"file":"static/js/538.2babd073.chunk.js","mappings":"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","sources":["components/Box.js","components/forms/AuthForms.styled.js","pages/authLayout/AuthLayout.styled.js","components/forms/registrationForm/PasswordStrengthMeter.styled.js","components/forms/registrationForm/PasswordStrengthMeter.jsx","components/forms/registrationForm/RegistrationForm.jsx","pages/registrationPage/RegistrationPage.styled.js","pages/registrationPage/RegistrationPage.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport {\n  color,\n  space,\n  layout,\n  flexbox,\n  background,\n  border,\n  position,\n  typography,\n  shadow\n} from 'styled-system';\n\nexport const Box = styled('div')(\n  color,\n  space,\n  layout,\n  flexbox,\n  background,\n  border,\n  position,\n  typography,\n  shadow\n);","import styled from \"@emotion/styled\";\nimport { Field, Form } from \"formik\";\n\nexport const StyledForm = styled(Form)`\n    display: flex;\n    position: absolute;\n    top: 50%;\n    left: 50%;\n    transform: translate(-50%, -50%);\n    z-index: 1;\n    flex-direction: column;\n    align-items: center;\n    width: 320px;\n    padding-left: 20px;\n    padding-right: 20px;\n    background-color: ${p => p.theme.colors.lightBackgroundColor};\n    border-radius: ${p => p.theme.radii.form};\n\n        @media screen and (min-width: 768px) {\n            position: absolute;\n            top: 50%;\n            left: 50%;\n            transform: translate(-50%, -50%);\n            z-index: 1;\n            width: 540px;   \n            padding: 40px 65px 60px 65.5px;\n        }\n`;\n\nexport const FieldWrap = styled.div`\n    position: relative;\n    width: 100%;\n    margin-bottom: 40px;\n\n        &:nth-of-type(3){\n            margin-bottom: 10px;\n        }\n        &:last-of-type{\n            margin-bottom: 50px;\n        }\n        &:first-of-type{\n            margin-top: 50px;\n        }\n`;\n\nexport const IconWrap = styled.span`\n    position: absolute;\n    width: 24px;\n    height: 24px;\n    left: 8px;\n    bottom: 10px;\n`;\n\nexport const StyledField = styled(Field)`\n    width: 100%;\n    height: 34px;\n    padding-left: 52px;\n    padding-bottom: 10px;\n    font-size: ${p => p.theme.fontSizes.m};\n    line-height: ${p => p.theme.lineHeights.normal};\n\n    border: ${p => p.theme.borders.none};\n    border-bottom: 1px solid ${p => p.theme.colors.borderColor};\n`;\n\nexport const Svg = styled.svg`\n    width: 24px;\n    height: 24px;\n    margin-right: 20px;\n`;\n\nexport const EyeButton = styled.button`\n    position: absolute;\n    right: 0;\n    top: 50%;\n    transform: translateY(-50%);\n    background-color: transparent;\n    outline: none;\n    border: ${p => p.theme.borders.none};\n    width: 30px;\n`;\n\nexport const StyledErrorMessage = styled.div`\n    position: absolute;\n    bottom: -25px;\n    left: 50%;\n    transform: translateX(-50%);\n    color: ${p => p.theme.colors.expenseColor};\n`;\n\n","import styled from \"@emotion/styled/macro\";\nimport ellipseLeft from '../../images/ellipse-left.png';\nimport ellipseRight from '../../images/ellipse-right.png';\n\nexport const AuthContainer = styled.div`\n    width: 100%;\n    height: 100vh;\n    margin: 0 auto;\n    background-color: ${p => p.theme.colors.lightBackgroundColor};\n    \n        @media screen and (min-width: 320px) {\n            width: 320px;\n        }\n        @media screen and (min-width: 768px) {\n            position: relative;\n            width: 768px;\n            overflow: hidden;\n            background-color: ${p => p.theme.colors.backgroundColor};\n\n            &::before {\n                content: \"\";\n                position: absolute;\n                background-image: url(${ellipseLeft});\n                background-repeat: no-repeat;\n                background-position: bottom left;\n                bottom: 0;\n                left: 0;\n                width: 618px;\n                height: 547px;\n            }\n\n            &::after {\n                content: \"\";\n                position: absolute;\n                background-image: url(${ellipseRight});\n                background-repeat: no-repeat;\n                background-position: top right;\n                width: 618px;\n                height: 547px;\n                right: 0;\n                top: 0;\n                filter: blur(15px);\n                opacity: 0.6;\n            }\n        }\n        \n        @media screen and (min-width: 1280px) {\n            display: flex;  \n            width: 1280px;\n        }\n`;\n\nexport const RightBackground = styled.div`\n    @media screen and (min-width: 1280px) {\n        position: relative;\n        width: 720px;\n        height: 100%;\n        background-color: ${p => p.theme.colors.secondaryBackgroundColor};\n    }\n`;","import styled from \"@emotion/styled\";\n\nexport const PasswordStrengthMeterWrap = styled.div`\n    text-align: left;\n    margin-bottom: 30px;\n`;\n\nexport const PasswordStrengthMeterProgress = styled.progress`\n    appearance: none;\n    width: 280px;\n    height: 6px;\n\n        @media screen and (min-width: 768px) {\n            width: 410px;   \n        }\n\n\n        &::-webkit-progress-bar {\n            background-color: #E5F1EF;\n            border-radius: ${p =>p.theme.radii.button};\n        }\n\n        &::-webkit-progress-value{\n            border-radius: 2px;\n            background-size: 35px 20px, 100% 100%, 100% 100%;\n        }\n\n        &.weak::-webkit-progress-value{\n            background-color: ${p =>p.theme.colors.expenseColor};\n        };\n\n        &.strong::-webkit-progress-value {\n            background-color: ${p =>p.theme.colors.incomeColor};\n        };\n\n        &.fair::-webkit-progress-value{\n            background-color: #FFE066;\n        };\n\n        &.good::-webkit-progress-value{\n            background-color: #247BA0;\n        };\n`;\n","import zxcvbn from 'zxcvbn';\nimport {PasswordStrengthMeterProgress, PasswordStrengthMeterWrap } from './PasswordStrengthMeter.styled';\n\nconst createPasswordLabel = (result) => {\n    switch (result.score) {\n      case 0:\n        return 'weak';\n      case 1:\n        return 'weak';\n      case 2:\n        return 'fair';\n      case 3:\n        return 'good';\n      case 4:\n        return 'strong';\n      default:\n        return 'weak';\n    }\n  }\n\nconst PasswordStrengthMeter = ({password}) => {\n    \n  const testedResult = zxcvbn(password);\n    \n  return (\n      <PasswordStrengthMeterWrap>\n        <PasswordStrengthMeterProgress\n          className={createPasswordLabel(testedResult)}\n          value={testedResult.score}\n          max=\"4\"\n        />\n    </PasswordStrengthMeterWrap >\n  )\n};\n\nexport default PasswordStrengthMeter;","import { useState } from 'react';\nimport { useDispatch} from 'react-redux';\nimport { AiOutlineEye, AiOutlineEyeInvisible } from 'react-icons/ai';\nimport { ErrorMessage, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { Logo } from 'components/logo/Logo';\nimport { Button } from 'components/buttons/button/Button';\nimport Sprite from '../../../images/icons/symbol-defs.svg';\nimport { signup } from 'redux/auth/auth-operations';\nimport { Loader } from 'components/loader/Loader';\nimport PasswordStrengthMeter from './PasswordStrengthMeter';\nimport { Box } from 'components/Box';\nimport {\n    EyeButton,\n    FieldWrap,\n    IconWrap,\n    StyledErrorMessage,\n    StyledField,\n    StyledForm,\n    Svg\n} from '../AuthForms.styled';\nimport { StyledNavButton } from 'components/buttons/button/Button.styled';\n\nconst idName = nanoid();\nconst idPassword = nanoid();\nconst idEmail = nanoid();\nconst idConfirmPassword = nanoid();\n\nexport const RegistrationForm = () => {\n\n    const dispatch = useDispatch();\n\n    const [showPassword, setShowPassword] = useState(false);\n    const [showConfirm, setShowConfirm] = useState(false);\n\n    const validationSchema = Yup.object({\n        name: Yup.string().required('Required'),\n        email: Yup.string().email('must be a valid email').required('Required'),\n        password: Yup.string().required('Required'),\n        confirm: Yup.string().oneOf([Yup.ref('password')]).required('Required')\n    });\n\n    const onSubmit = ({ name, email, password }, { resetForm }) => {\n        dispatch(signup({ name, email, password }));\n        resetForm();\n    };\n    \n    return (\n       <Formik\n            initialValues={{ email: '', password: '', name: '', confirm: '' }}\n            validationSchema={validationSchema}\n            onSubmit={onSubmit}\n        >\n            {({ values, errors, touched }) =>\n                <StyledForm autoComplete=\"off\" >\n                    <Logo />\n                    <FieldWrap>\n                        <StyledField label=\"Email\" name=\"email\" type=\"email\" id={idEmail} placeholder=\"E-mail\" />\n                        <IconWrap>\n                            <Svg>\n                                <use href={`${Sprite}#icon-email`}></use>\n                            </Svg>\n                        </IconWrap>\n                        <StyledErrorMessage>\n                            <ErrorMessage name=\"email\"/>\n                        </StyledErrorMessage>\n                    </FieldWrap>\n\n                    <FieldWrap>\n                        <StyledField label=\"Password\" name=\"password\" type={showPassword ? 'text' : 'password'} id={idPassword} placeholder=\"Password\" />\n                        <IconWrap>\n                            <Svg>\n                                <use href={`${Sprite}#icon-lock`}></use>\n                            </Svg>\n                        </IconWrap>\n                        <EyeButton type=\"button\" onClick={() => setShowPassword(!showPassword)}>\n                            {!showPassword ? <AiOutlineEyeInvisible color='#BDBDBD'/>:<AiOutlineEye color='#BDBDBD'/>}\n                        </EyeButton>\n                        <StyledErrorMessage >\n                           <ErrorMessage name=\"password\"/>\n                        </StyledErrorMessage>\n                    </FieldWrap>\n\n                    <FieldWrap>\n                        <StyledField label=\"Confirm-password\" name=\"confirm\" type={showConfirm ? 'text' : 'password'} id={idConfirmPassword} placeholder=\"Confirm password\" />\n                        <IconWrap><Svg><use href={`${Sprite}#icon-lock`}></use></Svg></IconWrap>\n                        <EyeButton type=\"button\" onClick={() => setShowConfirm(!showConfirm)}>\n                            {!showConfirm ? <AiOutlineEyeInvisible color='#BDBDBD'/>:<AiOutlineEye color='#BDBDBD'/>}\n                        </EyeButton>\n                    </FieldWrap>\n\n                    {(errors.confirm && touched.confirm) && <Box as=\"div\" color=\"expenseColor\">Fields do not match</Box>}\n                    <PasswordStrengthMeter password={values.password} />\n\n                    <FieldWrap>\n                        <StyledField label=\"Name\" name=\"name\" type=\"text\" id={idName} placeholder=\"Your name\" />\n                        <IconWrap>\n                            <Svg>\n                                <use href={`${Sprite}#icon-user`}></use>\n                            </Svg>\n                        </IconWrap>\n                        <StyledErrorMessage >\n                            <ErrorMessage name=\"name\"/>\n                        </StyledErrorMessage>\n                    </FieldWrap>\n                    \n                    <Button type=\"submit\">\n                        Registration\n                    </Button>\n                    <StyledNavButton to=\"/\" >\n                        Log in\n                    </StyledNavButton>\n                    <Loader />\n                </StyledForm>\n            }\n        </Formik>\n    )\n}","import styled from \"@emotion/styled\";\nimport registerImg from '../../images/register.png'\n\nexport const LeftBackground = styled.div`\n    @media screen and (min-width: 1280px) {\n        position: relative;\n        width: 560px;\n        height: 720px;\n    \n        &::after{\n            content: \"\";\n            position: absolute;\n            background-image: url(${registerImg});\n            background-repeat: no-repeat;\n            background-position: center;\n            width: 410px;\n            height: 413px;\n            left: 50%;\n            top: 70%;\n            transform: translate(-50%, -70%)\n        }\n    }\n`;\n\n","import { RegistrationForm } from \"components/forms/registrationForm/RegistrationForm\";\nimport { RightBackground } from \"pages/authLayout/AuthLayout.styled\";\nimport { LeftBackground } from \"./RegistrationPage.styled\";\n\nconst RegistrationPage = () => {\n    return (\n        <>\n            <LeftBackground/>\n            <RightBackground>\n                <RegistrationForm/>\n            </RightBackground>\n        </>\n    )\n}\n\nexport default RegistrationPage;"],"names":["Box","styled","color","space","layout","flexbox","background","border","position","typography","shadow","StyledForm","Form","p","theme","colors","lightBackgroundColor","radii","form","FieldWrap","IconWrap","StyledField","Field","fontSizes","m","lineHeights","normal","borders","none","borderColor","Svg","EyeButton","StyledErrorMessage","expenseColor","AuthContainer","backgroundColor","ellipseLeft","ellipseRight","RightBackground","secondaryBackgroundColor","PasswordStrengthMeterWrap","PasswordStrengthMeterProgress","button","incomeColor","createPasswordLabel","result","score","password","testedResult","zxcvbn","className","value","max","idName","nanoid","idPassword","idEmail","idConfirmPassword","RegistrationForm","dispatch","useDispatch","useState","showPassword","setShowPassword","showConfirm","setShowConfirm","validationSchema","Yup","name","required","email","confirm","oneOf","initialValues","onSubmit","resetForm","signup","values","errors","touched","autoComplete","Logo","label","type","id","placeholder","href","Sprite","onClick","as","Button","to","Loader","LeftBackground","registerImg"],"sourceRoot":""}