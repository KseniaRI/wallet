{"version":3,"file":"static/js/606.a1dd1f2a.chunk.js","mappings":"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","sources":["components/button/Button.jsx","components/button/Button.styled.js","components/registrationForm/AuthForms.styled.js","pages/authLayout/AuthLayout.styled.js","components/loginForm/LoginForm.jsx","pages/loginPage/LoginPage.styled.js","pages/loginPage/LoginPage.jsx"],"sourcesContent":["import { StyledButton } from \"./Button.styled\"\n\nexport const Button = ({ children }) => <StyledButton type=\"submit\">{children}</StyledButton>;\n    \n","import styled from \"@emotion/styled\";\nimport { NavLink } from \"react-router-dom\";\n\nexport const StyledButton = styled.button`\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nwidth: 300px;\nheight: 50px;\nborder: ${p => p.theme.borders.normal}; \nborder-color: ${p => p.theme.colors.accentColor};\nborder-radius: ${p => p.theme.radii.button};\nfont-size: ${p => p.theme.fontSizes.m};\nline-height: ${p => p.theme.lineHeights.normal};\ntext-transform: uppercase;\nbackground-color: ${p => p.theme.colors.lightBackgroundColor};\ncolor: ${p => p.theme.colors.accentColor};\n\ntransition:  all 250ms cubic-bezier(0.4, 0, 0.2, 1);\nmargin-bottom: 20px;\n\n&:hover,\n&:focus{\n   background-color: ${p => p.theme.colors.incomeColor};\n   color: ${p => p.theme.colors.lightTxtColor}; \n   border: ${p => p.theme.borders.none}; \n}\n`;\n\nexport const StyledNavButton = styled(NavLink)`\ndisplay: flex;\nalign-items: center;\njustify-content: center;\nwidth: 300px;\nheight: 50px;\nborder: ${p => p.theme.borders.normal}; \nborder-color: ${p => p.theme.colors.accentColor};\nborder-radius: ${p => p.theme.radii.button};\nfont-size: ${p => p.theme.fontSizes.m};\nline-height: ${p => p.theme.lineHeights.normal};\ntext-transform: uppercase;\nbackground-color: ${p => p.theme.colors.lightBackgroundColor};\ncolor: ${p => p.theme.colors.accentColor};\n\ntransition:  all 250ms cubic-bezier(0.4, 0, 0.2, 1);\nmargin-bottom: 20px;\n\n&:hover,\n&:focus{\n   background-color: ${p => p.theme.colors.incomeColor};\n   color: ${p => p.theme.colors.lightTxtColor}; \n   border: ${p => p.theme.borders.none}; \n}\n`","import styled from \"@emotion/styled\";\nimport { Field, Form } from \"formik\";\n\nexport const StyledForm = styled(Form)`\nposition: absolute;\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\ntop: 50%;\nleft: 50%;\npadding: 40px 65px 60px 65.5px;\ntransform: translate(-50%, -50%);\nz-index: 1;\nwidth: 540px;\nbackground-color: ${p => p.theme.colors.lightBackgroundColor};\nborder-radius: ${p => p.theme.radii.form};\n`;\n\nexport const FieldWrap = styled.div`\nposition: relative;\nwidth: 100%;\nmargin-bottom: 40px;\n\n&:nth-of-type(3){\n    margin-bottom: 10px;\n}\n&:last-of-type{\n    margin-bottom: 50px;\n}\n&:first-of-type{\n    margin-top: 50px;\n}\n`;\n\nexport const IconWrap = styled.span`\nposition: absolute;\nwidth: 24px;\nheight: 24px;\nleft: 8px;\nbottom: 10px;\n`;\n\nexport const StyledField = styled(Field)`\nwidth: 100%;\nheight: 34px;\npadding-left: 52px;\npadding-bottom: 10px;\nfont-size: ${p => p.theme.fontSizes.m};\nline-height: ${p => p.theme.lineHeights.normal};\n\nborder: ${p => p.theme.borders.none};\nborder-bottom: 1px solid ${p => p.theme.colors.borderColor};\n`;\n\nexport const Svg = styled.svg`\nwidth: 24px;\nheight: 24px;\nmargin-right: 20px;\n`;\n\nexport const EyeButton = styled.button`\nposition: absolute;\nright: 0;\ntop: 50%;\ntransform: translateY(-50%);\nbackground-color: transparent;\noutline: none;\nborder: ${p => p.theme.borders.none};\nwidth: 30px;\n`;\n\nexport const StyledErrorMessage = styled.div`\nposition: absolute;\nbottom: -25px;\nleft: 50%;\ntransform: translateX(-50%);\ncolor: ${p => p.theme.colors.expenseColor};\n`;\n\n","import styled from \"@emotion/styled\";\nimport ellipseLeft from '../../images/ellipse-left.png';\nimport ellipseRight from '../../images/ellipse-right.png';\n\n\nexport const Container = styled.div`\n    position: relative;\n    display: flex;\n    margin: 0 auto;\n    width: 1280px;\n    height: 720px;\n    overflow: hidden;\n    background-color: ${p => p.theme.colors.backgroundColor};\n\n    &::before {\n    content: \"\";\n    position: absolute;\n    background-image: url(${ellipseLeft});\n    background-repeat: no-repeat;\n    background-position: bottom left;\n    bottom: 0;\n    left: 0;\n    width: 618px;\n    height: 547px;\n    }\n\n    &::after {\n    content: \"\";\n    position: absolute;\n    background-image: url(${ellipseRight});\n    background-repeat: no-repeat;\n    background-position: top right;\n    width: 618px;\n    height: 547px;\n    right: 0;\n    top: 0;\n    filter: blur(15px);\n    opacity: 0.6;\n    }\n`;\n\nexport const RightBackground = styled.div`\n    position: relative;\n    width: 720px;\n    height: 720px;\n    background-color: ${p => p.theme.colors.secondaryBackgroundColor};\n`;","import { ErrorMessage, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { nanoid } from 'nanoid';\nimport { Logo } from 'components/logo/Logo';\nimport { EyeButton, FieldWrap, IconWrap, StyledErrorMessage, StyledField, StyledForm, Svg } from '../registrationForm/AuthForms.styled';\nimport { Button } from 'components/button/Button';\nimport Sprite from '../../images/icons/symbol-defs.svg';\nimport { useDispatch } from 'react-redux';\nimport { login } from 'redux/auth/auth-operations';\nimport { StyledNavButton } from 'components/button/Button.styled';\nimport { Loader } from 'components/loader/Loader';\nimport { useState } from 'react';\nimport { AiOutlineEye, AiOutlineEyeInvisible } from 'react-icons/ai';\n\nconst idPassword = nanoid();\nconst idEmail = nanoid();\n\nexport const LoginForm = () => {\n    const dispatch = useDispatch();\n    const [showPassword, setShowPassword] = useState(false);\n    \n    return (\n       <Formik\n          initialValues={{ email: '', password: '' }}\n            validationSchema={Yup.object({\n              email: Yup.string().email('must be a valid email').required('Required'),\n              password: Yup.string().required('Required'),\n            })\n            }\n            onSubmit={({ email, password }, { resetForm }) => {\n              dispatch(login({ email, password }));\n              resetForm();\n            }}\n        >\n            <StyledForm autoComplete=\"off\" >\n                <Logo />\n                <FieldWrap>\n                    <StyledField label=\"Email\" name=\"email\" type=\"email\" id={idEmail} placeholder=\"E-mail\"/>\n                    <IconWrap><Svg><use href={`${Sprite}#icon-email`}></use></Svg></IconWrap>\n                    <StyledErrorMessage>\n                        <ErrorMessage name=\"email\"/>\n                    </StyledErrorMessage>\n                </FieldWrap>\n                \n                <FieldWrap>\n                    <StyledField label=\"Password\" name=\"password\" type={showPassword ? 'text' : 'password'} id={idPassword} placeholder=\"Password\"/>\n                    <IconWrap><Svg><use href={`${Sprite}#icon-lock`}></use></Svg></IconWrap>\n                    <EyeButton type=\"button\" onClick={() => setShowPassword(!showPassword)}>\n                        {!showPassword ? <AiOutlineEyeInvisible color='#BDBDBD'/>:<AiOutlineEye color='#BDBDBD'/>}\n                    </EyeButton>\n                    <StyledErrorMessage >\n                        <ErrorMessage name=\"password\"/>\n                    </StyledErrorMessage>\n                </FieldWrap> \n                <Button>\n                    Log in\n                </Button>\n                <StyledNavButton to=\"/register\">\n                    Registration\n                </StyledNavButton>\n                <Loader />\n            </StyledForm> \n        </Formik>\n    )\n}","import styled from \"@emotion/styled\";\nimport loginImg from '../../images/login.png'\n\nexport const LeftBackground = styled.div`\n    position: relative;\n    width: 560px;\n    height: 720px;\n   \n    &::after{\n        content: \"\";\n        position: absolute;\n        background-image: url(${loginImg});\n        background-repeat: no-repeat;\n        background-position: center;\n        width: 435px;\n        height: 420px;\n        left: 50%;\n        top: 50%;\n        transform: translate(-50%, -50%)\n    }\n`;","import { LoginForm } from \"components/loginForm/LoginForm\";\nimport { Container, RightBackground } from \"pages/authLayout/AuthLayout.styled\";\nimport { LeftBackground } from \"./LoginPage.styled\";\n\nconst LoginPage = () => {\n    return (\n        <Container>\n            <LeftBackground/>\n            <RightBackground>\n                    <LoginForm/>\n            </RightBackground>\n        </Container>\n    )\n}\n\nexport default LoginPage;"],"names":["Button","children","S","type","StyledButton","styled","p","theme","borders","normal","colors","accentColor","radii","button","fontSizes","m","lineHeights","lightBackgroundColor","incomeColor","lightTxtColor","none","StyledNavButton","NavLink","StyledForm","Form","form","FieldWrap","IconWrap","StyledField","Field","borderColor","Svg","EyeButton","StyledErrorMessage","expenseColor","Container","backgroundColor","ellipseLeft","ellipseRight","RightBackground","secondaryBackgroundColor","idPassword","nanoid","idEmail","LoginForm","dispatch","useDispatch","useState","showPassword","setShowPassword","initialValues","email","password","validationSchema","Yup","required","onSubmit","resetForm","login","autoComplete","Logo","label","name","id","placeholder","href","Sprite","onClick","color","to","Loader","LeftBackground","loginImg"],"sourceRoot":""}